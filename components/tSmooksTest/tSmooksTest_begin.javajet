/*******************************************************************************
 * Copyright (c) 2009 SOPERA GmbH
 * All rights reserved. 
 * This program and the accompanying materials are made available
 * under the terms of the GNU Lesser General Public License v 3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-3.0.txt
 ******************************************************************************/
<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map
    		
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
    List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");
    
    String mode = ElementParameterParser.getValue(node, "__INPUT_FORMAT__");
        
    String inputuri = ElementParameterParser.getValue(node, "__INPUT_URI__");
    String mappinguri = ElementParameterParser.getValue(node, "__MAPPING_URI__");
    
    //boolean useediuri = ElementParameterParser.getValue(node,"__IS_EDI__").equals("true");
    String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
    
    String outputS = "Begin:";

    List< ? extends IConnection> connections = node.getOutgoingSortedConnections();
    
%>
	System.out.println("Begin in process!");
	
   
	int nb_line_<%=cid %> = 0;   
	String str_inpt_<%=cid %> = "";
	
<%
// *** EDI transform begin *** //
    if(("EDI").equals(mode)){
%>
  	   org.sopera.di.smooks.ComponentFacade inputFlow_<%=cid %> = new org.sopera.di.smooks.impl.ComponentFacadeImpl();

  	   inputFlow_<%=cid %>.setMapping(new java.io.FileInputStream("<%=mappinguri%>"));

	   inputFlow_<%=cid %>.setEDI(new java.io.FileInputStream("<%=inputuri%>"));

	   inputFlow_<%=cid %>.setXPath("/Order/order-item");
 
<%    
    if(connections!=null && connections.size()>0) {
	//get all the children collections of the loop node.
	   for(IConnection conn : connections){
	      IMetadataTable metadata = conn.getMetadataTable();
		  if(metadata!=null){
		  List<IMetadataColumn> columns = metadata.getListColumns();
%>	   
	   System.out.println("connName:<%=conn.getName()%>");
<%
			 for(IMetadataColumn column:columns) {
			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>
		System.out.println("colName:<%=column.getLabel()%> TalendType:<%=column.getTalendType()%>  Type:<%=column.getType()%> ");			 
		System.out.println("typeToGenerate:<%=typeToGenerate%> patternValue:" + <%=patternValue%>);
<%
			 } // columns
	      } // metadata!=null
	   } // connections

	   for(Map<String, String> schemaMap : schemas){
%>
	   System.out.println("schemaName:<%=schemaMap.get("SCHEMA")%>");
<%	   
	   }
%>
	inputFlow_<%=cid %>.start();
	while (!inputFlow_<%=cid %>.isEndOfFlow()) { // loop to iterate the data communication
	System.out.println("!!!nb_line:" + nb_line_<%=cid %>);
<%
	   for(IConnection conn : connections){
	      if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
		     String query = null;
			 for(Map<String, String> schemaMap : schemas){
			    if(schemaMap.get("SCHEMA").equals(conn.getName())){
 		           outputS = outputS  + " " + conn.getName() + ":";
				   IMetadataTable metadata = conn.getMetadataTable();
			       if(metadata!=null){
		              List<IMetadataColumn> columns = metadata.getListColumns();
		              for(IMetadataColumn column:columns) {
        			     String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				         JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				         String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
 		                 outputS = outputS  + column.getLabel() + ":";
                         if (conn.getName().equals("ORD") && javaType == JavaTypesManager.STRING) {
%>
 
		str_inpt_<%=cid %> = inputFlow_<%=cid %>.findTagValue("<%=column.getLabel() %>");
<%
                         	if (javaType == JavaTypesManager.DATE) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_inpt_<%=cid %>, <%= patternValue %>);
<%
						 	} else if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = str_inpt_<%=cid %>;
<%						 
						 	} else if (javaType == JavaTypesManager.BYTE_ARRAY) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = str_inpt_<%=cid %>.getBytes(<%=encoding %>);
<%						 
							} else if(JavaTypesManager.isNumberType(javaType)) { 
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(str_inpt_<%=cid %>, '.', ','));
<%
							} else {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_inpt_<%=cid %>);
<%
						 	}
 		                 } // conn.getName().equals("ORD")
 		                 else {
%>
	if(nb_line_<%=cid %> > 0) {
		<%=conn.getName() %> = null; 
	}
	else {

<%
                         if (javaType == JavaTypesManager.DATE) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date("01-01-2001", <%= patternValue %>);
<%
						 } else if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = "Iterate String Value";
<%						 
						 	} else if (javaType == JavaTypesManager.BYTE_ARRAY) {
%>
		str_inpt_<%=cid %> = "Iterate String Value";
		<%=conn.getName() %>.<%=column.getLabel() %> = str_inpt_<%=cid %>.getBytes(<%=encoding %>);
<%						 
							} else if(JavaTypesManager.isNumberType(javaType)) { 
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number("10,1", '.', ','));
<%
							} else {
%>
		str_inpt_<%=cid %> = "Other Iterate String Value";
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_inpt_<%=cid %>);
<%
						 } 	
%>
	}
<%
 		                 } // else (conn.getName().equals("ORD"))
 		              } // columns
 		           } // metadata!=null
 		        } // schemaMap.get("SCHEMA").equals(conn.getName())
			 } // schemas
		  } // conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)
	   } // connections
	}// connections!=null && connections.size()>0
%>
<%
	}// if (mode)
%>

